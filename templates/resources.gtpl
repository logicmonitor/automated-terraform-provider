//// Code generated by go-swagger; DO NOT EDIT.

{{ define "handleNonBodyParam" }}
	{{ camelize .ID }}Val, {{ camelize .ID }}IsSet := d.GetOk("{{ snakize .ID}}")
	if({{ camelize .ID }}IsSet){
		{{- if eq (camelize .ID) "id" }}
			{{ camelize .ID }}, _ := strconv.Atoi({{ camelize .ID }}Val.(string))
			params.{{ pascalize .ID}} = {{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}{{ end }}{{ if not .IsFileParam }}{{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}&{{ end }}int32({{ camelize .ID }}){{ else }}runtime.NamedReadCloser{{- end -}}
		{{- else }}
			params.{{ pascalize .ID}} = {{ camelize .ID }}Val.({{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}*{{ end }}{{ .GoType }})
		{{- end }}
	} {{ if .Required }} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - {{ .Name }}")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	} {{ end }}
{{ end }}

{{- $operationGroup := .Name -}} {{/* friendly reminder that operation groups map to OpenAPI Tags */}}

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"tf-provider-example/logicmonitor/utils"
)

/*
{{ pascalize $operationGroup }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}{{ humanize $operationGroup }} API{{ end }}
*/

func {{ pascalize $operationGroup }}() *schema.Resource {
	return &schema.Resource{
		{{- range .Operations }}
			{{- $operation := .Name }}
			{{- if not (stringContains $operation "List") }} {{/* GetList endpoints are used for datasources, not resources */}}
			{{- if eq .Method "GET" }}
		ReadContext: {{ $operation }},
			{{- end }}
			{{- if eq .Method "POST" }}
		CreateContext: {{ $operation }},
			{{- end }}
			{{- if eq .Method "PUT" }} {{/* this template can be easily expanded to use PATCH instead of PUT if your API supports it */}}
		UpdateContext: {{ $operation }},
			{{- end }}
			{{- if eq .Method "DELETE" }}
		DeleteContext: {{ $operation }},
			{{- end }}
			{{- end }}
		{{- end }}
		Schema: schemata.{{- pascalize $operationGroup -}}Schema(),
	}
}

func DataResource{{ pascalize $operationGroup }}() *schema.Resource {
	return &schema.Resource{
		{{- range .Operations }} {{/* skip everything except GetList opertaions */}}
			{{- $operation := .Name }}
			{{- if stringContains $operation "List" }}
			{{- if eq .Method "GET" }}
		ReadContext: {{ $operation }},
			{{- end }}
			{{- end}}
		{{- end }}
		Schema: schemata.DataSource{{- pascalize $operationGroup -}}Schema(),
	}
}

{{ range .Operations }}
	{{- $operation := .Name }}
	{{- if or (eq .Method "GET") (eq .Method "POST") (eq .Method "PUT") (eq .Method "DELETE") }} {{/* the only valid API methods for us */}}
func {{ $operation }}(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	{{- end}}
	{{- if eq .Method "GET" }} {{/* this is either the Get endpoint used by the resource or the GetList endpoint used by the datasource */}}

	params := {{ $operationGroup }}.New{{ pascalize $operation }}Params()
		
		{{- if stringContains $operation "List" }}

	filterVal, filterIsSet := d.GetOk("filter")
	if filterIsSet {
		stringVal := filterVal.(string)
		params.Filter = &stringVal
	}
		{{- else }}

	{{ range .Params }}
		{{- template "handleNonBodyParam" . -}}
	{{ end }}

		{{- end }}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.{{ pascalize $operationGroup }}.{{ pascalize $operation }}(params)
	log.Printf("[TRACE] response: %v", resp)
	if(err != nil){
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}
	
	respModel := resp.GetPayload()
		{{- if stringContains $operation "List" }}
	if len(respModel.Items) == 0 {
		diags = append(diags, diag.Errorf("no devices found")...)
	} else {
		// limit output to a single result
		result := respModel.Items[0]
		d.SetId(strconv.Itoa(int(result.ID)))
		schemata.Set{{- pascalize $operationGroup -}}ResourceData(d, result)
	}
	{{- else }}
	schemata.Set{{- pascalize $operationGroup -}}ResourceData(d, respModel)
	{{- end}}

	return diags
}
	{{- end }}

	{{- if eq .Method "POST" }}

	model := schemata.{{ pascalize $operationGroup }}Model(d)
	params := {{ $operationGroup }}.New{{ pascalize $operation }}Params()
	params.SetBody(model)

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.{{ pascalize $operationGroup }}.{{ pascalize $operation }}(params)
	log.Printf("[TRACE] response: %v", resp)
	if(err != nil){
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.Set{{ pascalize $operationGroup }}ResourceData(d, respModel)
	d.SetId(strconv.Itoa(int(resp.Payload.ID)))

	return diags
}
	{{- end }}

	{{- if eq .Method "PUT" }}
	d.Partial(true)

	model := schemata.{{pascalize $operationGroup }}Model(d)
	params := {{ $operationGroup }}.New{{ pascalize $operation }}Params()

	{{ range .Params }}
		{{ if eq (camelize .ID) "body" }}
			params.SetBody(model)
		{{ else }}
			{{- template "handleNonBodyParam" . -}}
		{{ end }}
	{{ end }}

	// list of available properties
	props := schemata.Get{{ pascalize $operationGroup }}PropertyFields()

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	client := m.(*client.LogicMonitorRESTAPI)

	// makes a bulk update for all properties that were changed
	resp, err := client.{{ pascalize $operationGroup }}.{{ pascalize $operation }}(params)
	log.Printf("[TRACE] response: %v", resp)
	if(err != nil){
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()	
	schemata.Set{{ pascalize $operationGroup }}ResourceData(d, respModel)
	d.Partial(false)

	return diags
}
	{{- end }}
	
	{{- if eq .Method "DELETE" }}
	
	params := {{ $operationGroup }}.New{{ pascalize $operation }}Params()

	{{ range .Params }}
		{{- template "handleNonBodyParam" . -}}
	{{ end }}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.{{ pascalize $operationGroup }}.{{ pascalize $operation }}(params)
	log.Printf("[TRACE] response: %v", resp)
	if(err != nil){
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}
	
	d.SetId("")
	return diags
}
	{{- end }}
{{ end }}
